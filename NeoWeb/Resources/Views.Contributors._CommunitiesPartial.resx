<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlienworksDescription" xml:space="preserve">
    <value>Alienworks is a global group of developers formed to build tools and resources to support current and future developers in Neo's ecosystem and beyond. Its goal is to provide users and developers with the convenience of using and building a future-oriented smart economy in the crypto world.</value>
  </data>
  <data name="AxLabsDescription" xml:space="preserve">
    <value>AxLabs is a community developing and maintaining projects in the Neo Ecosystem, mainly focusing on Developer Experience (DevEx). AxLabs joined Neo in late 2018, and since then has been building various tools to make the DevEx on Neo as smooth and intuitive as possible. Examples are tools for Java/Kotlin developers, like the neow3j SDK, the neow3j compiler &amp; devpack, as well as the Neo Playground. &lt;br /&gt;&lt;br /&gt;The team consists of passionate builders and open-source enthusiasts, with a track record in projects in the blockchain scene. Alongside its broad software engineering experience, AxLabs team members share a strong academic background, with close ties to educational institutions in Switzerland - giving workshops, lectures, and tutorials for a broad audience across the globe.</value>
  </data>
  <data name="CozDescription" xml:space="preserve">
    <value>COZ is a software development group specializing in blockchain and distributed technologies. Since its humble beginnings as an open source, community driven organization, COZ has become one of blockchain’s most respected development organizations, consistently delivering groundbreaking products. COZ is responsible for projects such as Neon wallet, Dora, the Neo Python suite, and Neon-js.</value>
  </data>
  <data name="NeoNewsTodayDescription" xml:space="preserve">
    <value>Neo News Today is a community run news website dedicated to delivering up-to-date information on all things connected to the Neo ecosystem. NNT provides breaking news, interviews, guides, and resources materials, carefully delivered to the community with an emphasis on accuracy and reliability.</value>
  </data>
  <data name="NeoResearchDescription" xml:space="preserve">
    <value>NeoResearch is an open-source community which supports the ecosystem with teaching, researching and applied development for blockchain technology. The group welcomes contributors to discuss, investigate and propose solutions for challenges that are present on a variety of core components of the Neo Blockchain. In this sense, monitoring, analysis, testing and experimentation are core concepts embraced by NeoResearch. Empowering the ecosystem with didactic tools is a path for technology adoption and a positive identity consolidation is NeoResearch's vision.</value>
  </data>
  <data name="NeoTrackerDescription" xml:space="preserve">
    <value>NEO Tracker is the team is behind the NEO•ONE and NEO Tracker tools. NEO•ONE is an open source end-to-end framework that makes coding, testing and deploying Neo dapps easy, fast, efficient and enjoyable. NEO Tracker is a blockchain explorer and web wallet which gives users a gateway to interact with the Neo Blockchain. The NEO Tracker team aims to provide powerful, intuitive and approachable tools for the community.</value>
  </data>
  <data name="NewEconoLabsDescription" xml:space="preserve">
    <value>NEL is a Chinese developer community committed to providing developer-friendly tools to improve Neo's ease of use. It has developed and maintained many blockchain tools such as NELScan browser, NEORAY online contract development tool, Teemo wallet, etc.</value>
  </data>
  <data name="NextDescription" xml:space="preserve">
    <value>NEXT is a next-generation internet application lab, delivering Neo open network infrastructure services. The community was created as a dApp incubator, seeking to pull more developers into the Neo community and spearhead innovation in the blockchain sector.</value>
  </data>
  <data name="Red4SecDescription" xml:space="preserve">
    <value>Red4Sec is a Cybersecurity company located in Madrid, Spain, specializing in blockchain technologies, ethical hacking, penetration testing, and code audits. Rec4Sec was formed by a team of experts and security analysts with many years of experience in the Cybersecurity sector. In recent years, Red4Sec has become increasingly focused on blockchain and smart contract code audits and has partnered with great blockchain projects such as Neo.</value>
  </data>
  <data name="SpccDescrition" xml:space="preserve">
    <value>With support from Neo Foundation, Neo SPCC works on Neo ecosystem projects as a part of the international community of developers. Neo SPCC core projects are NeoFS, a decentralized object storage platform integrated with Neo Blockchain, and NeoGo, high-performance Neo node implementation and SDK for Go programming language. &lt;br /&gt;&lt;br /&gt;Neo SPCC's long-term goal is to build a true decentralized cloud platform using Neo technologies that will allow solving almost any real-world B2B and B2C problems in a decentralized setting.</value>
  </data>
</root>